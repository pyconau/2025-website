---
import { getCollection } from "astro:content"
import { isScheduled, timeSlices } from "../../lib"
import { DateTime, Duration } from "luxon"
import Base from "../../layouts/Base.astro"
import ProgramSwitcher from "../../components/ProgramSwitcher.astro"
import {
  CONFERENCE_TZ,
  ROOM_SLUGS,
  RoomSlug,
  SPECIALIST_TRACKS,
} from "../../main_config"
import { ROOMS } from "../../main_config"
import Session from "../../components/program/Session.astro"

export async function getStaticPaths() {
  return ["friday", "saturday", "sunday", "monday", "tuesday"].map((day) => ({
    params: { day },
    props: { day },
  }))
}
export type Props = {
  day: "friday" | "saturday" | "sunday" | "monday" | "tuesday"
}
const { day } = Astro.props as Props
const datestamp = {
  friday: DateTime.fromISO("2025-09-12", { zone: CONFERENCE_TZ }),
  saturday: DateTime.fromISO("2025-09-13", { zone: CONFERENCE_TZ }),
  sunday: DateTime.fromISO("2025-09-14", { zone: CONFERENCE_TZ }),
  monday: DateTime.fromISO("2025-09-15", { zone: CONFERENCE_TZ }),
  tuesday: DateTime.fromISO("2025-09-16", { zone: CONFERENCE_TZ }),
}[day]
const sessions = (await getCollection("sessions"))
  .filter(isScheduled)
  .map((x) => ({
    ...x,
    data: {
      ...x.data,
      start: DateTime.fromJSDate(x.data.start, { zone: CONFERENCE_TZ }),
      end: DateTime.fromJSDate(x.data.end, { zone: CONFERENCE_TZ }),
    },
  }))
  .filter((s) => s.data.start.hasSame?.(datestamp, "day"))

const breaks = (await getCollection("breaks"))
  .map((x) => ({
    ...x,
    data: {
      ...x.data,
      start: DateTime.fromJSDate(x.data.start, { zone: CONFERENCE_TZ }),
      end: DateTime.fromJSDate(x.data.end, { zone: CONFERENCE_TZ }),
    },
  }))
  .filter((s) => s.data.start.hasSame?.(datestamp, "day"))

const [dayStart, dayEnd] = [...sessions, ...breaks].reduce<
  [DateTime, DateTime]
>(
  ([dayStart, dayEnd], session) => [
    DateTime.min(dayStart, session.data.start).startOf("hour"),
    DateTime.max(dayEnd, session.data.end),
  ],
  [datestamp.set({ hour: 12 }), datestamp.set({ hour: 12 })],
)

function idx(dt: DateTime): number {
  return Math.floor(dt.toUnixInteger() / (5 * 60))
}
const TODAYS_ROOMS = ROOMS.filter((room) => room.days.includes(day))
const roomMap = Object.fromEntries(TODAYS_ROOMS.map((room, i) => [room.slug, i + 1]))


const speakerNameMap = new Map(
  (await getCollection("people")).map((person) => [
    person.id,
    person.data.name,
  ]),
)
const tracksByRoom = Object.fromEntries(
  SPECIALIST_TRACKS.map((track) => [track.room, track]),
) as { [k in RoomSlug]: (typeof SPECIALIST_TRACKS)[number] & { room: k } }
---

<Base>
  <style lang="scss">
    @import "../../vars.scss";
    @import "../../components/program/lib.scss";
    @include horizontal {
      html,
      body {
        scroll-snap-type: y proximity;
        overscroll-behavior-x: contain;
      }
    }

    s-schedule-outer {
      display: block;
      @include horizontal {
        width: 100%;
        overflow-x: auto;
        overflow-y: hidden;
        writing-mode: vertical-lr;
        height: 100vh;
        scroll-snap-align: center;
      }
    }

    s-schedule {
      display: grid;
      @include vertical {
        width: 100%;
        grid-template-columns: auto auto repeat(var(--total-tracks), 1fr);
        grid-template-rows: auto repeat(
            calc(var(--day-end) - var(--day-start)),
            1fr
          );
      }
      @include horizontal {
        height: 100%;
        width: calc((var(--day-end) - var(--day-start)) * 30px);
        grid-template-rows: auto auto repeat(var(--total-tracks), 1fr);
        grid-template-columns: auto repeat(
            calc(var(--day-end) - var(--day-start)),
            1fr
          );
        writing-mode: horizontal-tb;
      }
    }

    s-schedule .session {
      z-index: 1;
      color: inherit;
      text-decoration: none;
      background-color: rgba($wattle-leaf, 0.2);
      .backstage &.session-L,
      .backstage &.session-None {
        background-color: rgba($wattle-leaf, 0.5);
      }
      border-radius: 5px;
      padding: 7px;
      margin: 2px;
      @include vertical {
        grid-column-start: calc(var(--track) + 2);
        grid-column-end: span 1;
        grid-row-start: calc(var(--start) - var(--day-start) + 2);
        grid-row-end: calc(var(--end) - var(--day-start) + 2);
        font-size: 16px;
      }
      @include horizontal {
        grid-row-start: calc(var(--track) + 2);
        grid-row-end: span 1;
        grid-column-start: calc(var(--start) - var(--day-start) + 2);
        grid-column-end: calc(var(--end) - var(--day-start) + 2);
        font-size: 14px;
      }
      overflow: hidden;
      text-overflow: ellipsis;
      line-height: 1em;

      .speaker {
        font-size: 0.75em;
        font-weight: bold;
      }
      .time {
        font-size: 0.6em;
        font-weight: bold;
        font-family: $heading-font;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
    }
    s-schedule .session.plenary {
      @include vertical {
        grid-column-start: 3;
        grid-column-end: span 3;
      }
      @include horizontal {
        grid-row-start: 3;
        grid-row-end: span 3;
      }
    }

    s-tba {
      border: 3px dashed #888;
      border-radius: 5px;
      padding: 10px;
      font-style: italic;
      font-size: 1.5em;
      text-align: center;
      color: #888;
      @include vertical {
        grid-column-start: calc(var(--track) + 2);
        grid-column-end: span 1;
        grid-row-start: calc(var(--start) - var(--day-start) + 2);
        grid-row-end: calc(var(--end) - var(--day-start) + 2);
      }
      @include horizontal {
        grid-row-start: calc(var(--track) + 2);
        grid-row-end: span 1;
        grid-column-start: calc(var(--start) - var(--day-start) + 2);
        grid-column-end: calc(var(--end) - var(--day-start) + 2);
      }
    }

    s-track,
    s-tz-header {
      z-index: 2;
      text-align: center;
      padding: 5px;
      position: sticky;
      top: 0;
      left: 0;
      background-color: rgba(255, 255, 255, 0.5);
      backdrop-filter: blur(4px);
      font-weight: bold;
      -webkit-backdrop-filter: blur(4px);
      @include vertical {
        grid-row: 1;
        grid-column: calc(var(--track) + 2);
      }
      @include horizontal {
        grid-column: 1;
        grid-row: calc(var(--track) + 2);
      }
    }

    s-track {
      @include horizontal {
        writing-mode: vertical-rl;
        transform: rotate(0.5turn);
        font-size: 13px;
      }
    }

    s-tz-header {
      @include vertical {
        grid-column: 1;
        &.local {
          grid-column: 2;
        }
      }
      @include horizontal {
        grid-row: 1;
        &.local {
          grid-row: 2;
        }
      }
    }

    s-time,
    s-now {
      color: #aaa;
      padding: 3px;
      @include vertical {
        text-align: center;
        grid-column: 1;
        &.local {
          grid-column: 2;
        }
        grid-row-start: calc(var(--at) - var(--day-start) + 2);
        grid-row-end: span 60;
      }
      @include horizontal {
        grid-row: 1;
        &.local {
          grid-row: 2;
        }
        grid-column-start: calc(var(--at) - var(--day-start) + 2);
        grid-column-end: span 60;
      }
      z-index: -2;
    }

    s-time-rule,
    s-now-rule {
      @include vertical {
        grid-column-start: 1;
        grid-column-end: calc(var(--total-tracks) + 3);
        grid-row: calc(var(--at) - var(--day-start) + 2);
      }
      @include horizontal {
        grid-row-start: 1;
        grid-row-end: calc(var(--total-tracks) + 3);
        grid-column: calc(var(--at) - var(--day-start) + 2);
      }
    }

    s-time-rule {
      @include vertical {
        border-top: 1px solid #ddd;
      }
      @include horizontal {
        border-left: 1px solid #ddd;
      }
      z-index: -2;
    }

    s-now-rule {
      @include vertical {
        border-top: 1px solid rgba($red-centre, 0.7);
      }
      @include horizontal {
        border-left: 1px solid red;
      }
      z-index: -1;
    }

    .tz {
      text-align: center;
      font-size: 0.75em;
      color: rgba(0, 0, 0, 0.6);
    }
  </style>

  {
    /*
<div class="switcher">
    <a href="/program/all/">All</a>
    <a href="/program/fri/" {% if day.0 == 'fri' %} class="selected" {% endif %}
        >Friday</a
    >
    <a href="/program/sat/" {% if day.0 == 'sat' %} class="selected" {% endif %}
        >Saturday</a
    >
    <a href="/program/sun/">Sunday</a>
</div>
*/
  }
  <ProgramSwitcher current={day} />
  <p class="tz">
    All times shown in AEST (UTC+10). <a href="https://pretalx.com/pycon-au-2025/schedule/export/schedule.json"
      >JSON</a
    >.
  </p>

  <s-schedule-outer>
      
        <s-schedule
          style={`--day-start: ${idx(dayStart)}; --day-end: ${idx(
            dayEnd,
          )}; --total-tracks: ${ROOMS.filter((room) => room.days.includes(day)).length};`}
          data-start={dayStart.toISO()}
          data-end={dayEnd.toISO()}
        >
      
      {
        
        ROOMS.filter((room) => room.days.includes(day)).map(({ name, slug }, i) => (
          <s-track style={`--track: ${i + 1};`}>
            {name}
            {day === "friday" ? (
              <a href={`/${tracksByRoom[slug].slug}/`}>
                {tracksByRoom[slug].name}
              </a>
            ) : null}
          </s-track>
        ))
      }
      {
        sessions.map((session) => (
          <Session
            session={session}
            idx={idx}
            speakerNameMap={speakerNameMap}
            roomMap={roomMap}
          />
        ))
      }{
        breaks.map((break_) => (
          <div
            class="session plenary"
            style={`--start: ${idx(break_.data.start)}; --end: ${idx(
              break_.data.end,
            )}; --track: ${roomMap[break_.data.room]};`}
          >
            {break_.data.description}
          </div>
        ))
      }
      {
        /*
    {% endfor %}
        {% for x in range(first_min, last_min, 60) %}
            <s-time style="--at: {{ x }}">
            {% set hr = (x + 600) % 1440 // 60 %}
            {% if hr > 12 %} {{ hr - 12 }} pm
            {% elif hr == 12 %} {{ hr }} pm {# WHY IS TIME LIKE THIS #}
            {% else %} {{ hr }} am
            {% endif %}
            </s-time>
            <s-time-rule style="--at: {{ x }}"></s-time-rule>
        {% endfor %}
        */
      }

      {
        [...timeSlices(dayStart, dayEnd, Duration.fromISO("PT30M"))].map(
          (time) => (
            <>
              <s-time style={`--at: ${idx(time)}; min-height: 0.25rem;`}>
                {time.toLocaleString(DateTime.TIME_SIMPLE)}
              </s-time>
              <s-time-rule style={`--at: ${idx(time)}; min-height: 0.25rem;`} />
            </>
          ),
        )
      }
    </s-schedule>
  </s-schedule-outer>
</Base>
